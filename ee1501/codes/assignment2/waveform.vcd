$date
	Sat Apr 19 19:49:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module convolve_tb $end
$var integer 32 ! i [31:0] $end
$scope module dut $end
$var integer 32 " i [31:0] $end
$var integer 32 # j [31:0] $end
$var integer 32 $ k [31:0] $end
$upscope $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 % \x[0] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 & \h[0] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 ' \x[1] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 ( \h[1] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 ) \x[2] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 * \h[2] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 + \x[3] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 , \h[3] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 - \x[4] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 . \h[4] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 / \x[5] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 0 \h[5] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 1 \x[6] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 2 \h[6] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 3 \x[7] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 4 \h[7] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 5 \out[0] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 6 \out[1] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 7 \out[2] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 8 \out[3] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 9 \out[4] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 : \out[5] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 ; \out[6] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 < \out[7] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 = \out[8] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 > \out[9] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 ? \out[10] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 @ \out[11] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 A \out[12] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 B \out[13] [3:0] $end
$upscope $end
$scope module convolve_tb $end
$var reg 4 C \out[14] [3:0] $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1000 C
b1111 B
b101 A
b1010 @
b1110 ?
b1 >
b11 =
b100 <
b1100 ;
b101 :
b1111 9
b1010 8
b110 7
b11 6
b1 5
b1 4
b1000 3
b1 2
b111 1
b1 0
b110 /
b1 .
b101 -
b1 ,
b100 +
b1 *
b11 )
b1 (
b10 '
b1 &
b1 %
b1111 $
b1000 #
b1000 "
b1000 !
$end
#10000
b1000 #
b1000 "
b1 C
b10 B
b11 A
b100 @
b101 ?
b110 >
b111 =
b1000 <
b111 ;
b110 :
b101 9
b100 8
b11 7
b10 6
b1 5
b1111 $
b1 4
b1 3
b1 2
b1 1
b1 0
b1 /
b1 .
b1 -
b1 ,
b1 +
b1 *
b1 )
b1 (
b1 '
b1 &
b1 %
b1000 !
#20000
b1000 #
b1000 "
b11 C
b0 B
b1110 A
b1011 @
b0 ?
b0 >
b0 =
b10 <
b1011 ;
b101 :
b1 9
b1 8
b1000 7
b110 6
b110 5
b1111 $
b111 4
b101 2
b11 0
b110 .
b1 ,
b100 *
b1000 (
b10 &
b101 3
b1 1
b110 /
b100 -
b1001 +
b10 )
b111 '
b11 %
#30000
