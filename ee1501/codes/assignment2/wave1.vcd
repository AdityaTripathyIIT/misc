$date
	Tue Apr 22 23:31:18 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module convolution_tb $end
$scope module dut $end
$var integer 32 ! i [31:0] $end
$var integer 32 " j [31:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 # i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 $ i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 % i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop3 $end
$var integer 32 & i [31:0] $end
$upscope $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 ' \x[0] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 ( \h[0] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 ) \x[1] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 * \h[1] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 + \x[2] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 , \h[2] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 - \x[3] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 . \h[3] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 / \x[4] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 0 \h[4] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 1 \x[5] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 2 \h[5] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 3 \x[6] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 4 \h[6] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 5 \x[7] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 6 \h[7] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 7 \y[0] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 8 \y[1] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 9 \y[2] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 : \y[3] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 ; \y[4] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 < \y[5] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 = \y[6] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 > \y[7] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 ? \y[8] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 @ \y[9] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 A \y[10] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 B \y[11] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 C \y[12] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 D \y[13] [3:0] $end
$upscope $end
$scope module convolution_tb $end
$var reg 4 E \y[14] [3:0] $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1000 E
b1111 D
b101 C
b1010 B
b1110 A
b1 @
b11 ?
b100 >
b1100 =
b101 <
b1111 ;
b1010 :
b110 9
b11 8
b1 7
b1 6
b1000 5
b1 4
b111 3
b1 2
b110 1
b1 0
b101 /
b1 .
b100 -
b1 ,
b11 +
b1 *
b10 )
b1 (
b1 '
b0 &
b0 %
b1111 $
b1000 #
b1000 "
b1111 !
$end
#10000
b1 E
b10 D
b11 C
b100 B
b101 A
b110 @
b111 ?
b1000 >
b111 =
b110 <
b101 ;
b100 :
b11 9
b10 8
b1000 "
b1111 !
b1 6
b1 4
b1 2
b1 0
b1 .
b1 ,
b1 *
b1 (
b1 5
b1 3
b1 1
b1 /
b1 -
b1 +
b1 )
b1 '
b1111 %
#20000
b1111 &
